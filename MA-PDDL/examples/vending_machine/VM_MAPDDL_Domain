(define (domain vending-machine)
  (:requirements :typing :fluents :continuous-effects :time :negative-preconditions)
  (:types customer coin)

  ;; Predicates
  (:predicates
    (slotopen)                 ;; Is the coin slot open?
    (coinfalling ?coin - coin) ;; Is a specific coin currently falling?
    (newcoin ?customer - customer) ;; Has a new coin been inserted by a specific customer?
    (finished ?customer - customer) ;; Has a specific customer finished interacting?
    (lightsensorstatus ?coin - coin) ;; Is the light sensor detecting this specific coin?
    (counterstatus ?coin - coin) ;; Is the counter detecting this specific coin?
  )

  ;; Functions
  (:functions
    (acc ?coin - coin)         ;; Acceleration of a specific coin
    (vel ?coin - coin)         ;; Velocity of a specific coin
    (dist ?coin - coin)        ;; Distance traveled by a specific coin
    (lightsensorposn)          ;; Position of the light sensor (global)
    (trayposition)             ;; Position of the tray (global)
    (counted ?customer - customer) ;; Number of coins counted for a specific customer
  )

  ;; Actions for Customers
  (:action entercoin
    :parameters (?customer - customer ?coin - coin)
    :precondition (and (slotopen) (not (coinfalling ?coin)))
    :effect (and
      (not (slotopen))
      (coinfalling ?coin)
      (newcoin ?customer)
      (increase (acc ?coin) 1))
  )

  (:action stop
    :parameters (?customer - customer)
    :precondition (and (> (counted ?customer) 0) (slotopen))
    :effect (finished ?customer)
  )

  ;; Processes for Coins
  (:process falling
    :parameters (?coin - coin)
    :precondition (coinfalling ?coin)
    :effect (and
      (increase (dist ?coin) (* #t (vel ?coin)))
      (increase (vel ?coin) (* #t (acc ?coin))))
  )

  ;; Events in the Environment
  (:event lightsensoroff
    :parameters (?coin - coin)
    :precondition (and
      (>= (dist ?coin) (lightsensorposn))
      (lightsensorstatus ?coin)
      (coinfalling ?coin))
    :effect (and
      (not (lightsensorstatus ?coin))
      (counterstatus ?coin))
  )

  (:event lightsensoron
    :parameters (?coin - coin)
    :precondition (and
      (not (lightsensorstatus ?coin))
      (counterstatus ?coin)
      (> (dist ?coin) (lightsensorposn)))
    :effect (and
      (lightsensorstatus ?coin)
      (not (counterstatus ?coin))
      (increase (counted ?customer) 1)) ;; Tied to a specific customer
  )

  (:event received
    :parameters (?coin - coin)
    :precondition (and
      (>= (dist ?coin) (trayposition))
      (not (newcoin ?coin))
      (coinfalling ?coin))
    :effect (and
      (not (coinfalling ?coin))
      (assign (dist ?coin) 0)
      (assign (vel ?coin) 0)
      (assign (acc ?coin) 0)
      (slotopen))
  )
)
