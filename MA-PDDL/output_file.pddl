(define (domain car-ma)
  (:requirements :typing :fluents :time :negative-preconditions :multi-agent)
  (:types agent)
  (:predicates
    (running ??agent)
    (engineblown ??agent)
    (transmission_fine ??agent)
    (goal_reached ??agent)
  )
  (:functions
    (d ??agent)
    (v ??agent)
    (a ??agent)
    (up_limit ??agent)
    (down_limit ??agent)
    (running_time ??agent)
  )
  (:action car1_accelerate-car2_accelerate-car3_accelerate
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (car2_running)
      (< (car2_a) car2_up_limit)
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (increase (car1_a) 1)
      (increase (car2_a) 1)
      (increase (car3_a) 1)
    )
  )
  (:action car1_accelerate-car2_accelerate-car3_decelerate
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (car2_running)
      (< (car2_a) car2_up_limit)
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (increase (car1_a) 1)
      (increase (car2_a) 1)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_accelerate-car2_accelerate-car3_stop
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (car2_running)
      (< (car2_a) car2_up_limit)
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (increase (car1_a) 1)
      (increase (car2_a) 1)
      (car3_goal_reached)
    )
  )
  (:action car1_accelerate-car2_decelerate-car3_accelerate
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (car2_running)
      (> (car2_a) car2_down_limit)
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (increase (car1_a) 1)
      (decrease (car2_a) 1)
      (increase (car3_a) 1)
    )
  )
  (:action car1_accelerate-car2_decelerate-car3_decelerate
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (car2_running)
      (> (car2_a) car2_down_limit)
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (increase (car1_a) 1)
      (decrease (car2_a) 1)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_accelerate-car2_decelerate-car3_stop
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (car2_running)
      (> (car2_a) car2_down_limit)
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (increase (car1_a) 1)
      (decrease (car2_a) 1)
      (car3_goal_reached)
    )
  )
  (:action car1_accelerate-car2_stop-car3_accelerate
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (increase (car1_a) 1)
      (car2_goal_reached)
      (increase (car3_a) 1)
    )
  )
  (:action car1_accelerate-car2_stop-car3_decelerate
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (increase (car1_a) 1)
      (car2_goal_reached)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_accelerate-car2_stop-car3_stop
    :precondition (and
      (car1_running)
      (< (car1_a) car1_up_limit)
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (increase (car1_a) 1)
      (car2_goal_reached)
      (car3_goal_reached)
    )
  )
  (:action car1_decelerate-car2_accelerate-car3_accelerate
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (car2_running)
      (< (car2_a) car2_up_limit)
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (decrease (car1_a) 1)
      (increase (car2_a) 1)
      (increase (car3_a) 1)
    )
  )
  (:action car1_decelerate-car2_accelerate-car3_decelerate
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (car2_running)
      (< (car2_a) car2_up_limit)
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (decrease (car1_a) 1)
      (increase (car2_a) 1)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_decelerate-car2_accelerate-car3_stop
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (car2_running)
      (< (car2_a) car2_up_limit)
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (decrease (car1_a) 1)
      (increase (car2_a) 1)
      (car3_goal_reached)
    )
  )
  (:action car1_decelerate-car2_decelerate-car3_accelerate
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (car2_running)
      (> (car2_a) car2_down_limit)
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (decrease (car1_a) 1)
      (decrease (car2_a) 1)
      (increase (car3_a) 1)
    )
  )
  (:action car1_decelerate-car2_decelerate-car3_decelerate
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (car2_running)
      (> (car2_a) car2_down_limit)
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (decrease (car1_a) 1)
      (decrease (car2_a) 1)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_decelerate-car2_decelerate-car3_stop
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (car2_running)
      (> (car2_a) car2_down_limit)
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (decrease (car1_a) 1)
      (decrease (car2_a) 1)
      (car3_goal_reached)
    )
  )
  (:action car1_decelerate-car2_stop-car3_accelerate
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (decrease (car1_a) 1)
      (car2_goal_reached)
      (increase (car3_a) 1)
    )
  )
  (:action car1_decelerate-car2_stop-car3_decelerate
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (decrease (car1_a) 1)
      (car2_goal_reached)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_decelerate-car2_stop-car3_stop
    :precondition (and
      (car1_running)
      (> (car1_a) car1_down_limit)
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (decrease (car1_a) 1)
      (car2_goal_reached)
      (car3_goal_reached)
    )
  )
  (:action car1_stop-car2_accelerate-car3_accelerate
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (car2_running)
      (< (car2_a) car2_up_limit)
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (car1_goal_reached)
      (increase (car2_a) 1)
      (increase (car3_a) 1)
    )
  )
  (:action car1_stop-car2_accelerate-car3_decelerate
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (car2_running)
      (< (car2_a) car2_up_limit)
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (car1_goal_reached)
      (increase (car2_a) 1)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_stop-car2_accelerate-car3_stop
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (car2_running)
      (< (car2_a) car2_up_limit)
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (car1_goal_reached)
      (increase (car2_a) 1)
      (car3_goal_reached)
    )
  )
  (:action car1_stop-car2_decelerate-car3_accelerate
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (car2_running)
      (> (car2_a) car2_down_limit)
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (car1_goal_reached)
      (decrease (car2_a) 1)
      (increase (car3_a) 1)
    )
  )
  (:action car1_stop-car2_decelerate-car3_decelerate
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (car2_running)
      (> (car2_a) car2_down_limit)
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (car1_goal_reached)
      (decrease (car2_a) 1)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_stop-car2_decelerate-car3_stop
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (car2_running)
      (> (car2_a) car2_down_limit)
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (car1_goal_reached)
      (decrease (car2_a) 1)
      (car3_goal_reached)
    )
  )
  (:action car1_stop-car2_stop-car3_accelerate
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (car3_running)
      (< (car3_a) car3_up_limit)
    )
    :effect (and
      (car1_goal_reached)
      (car2_goal_reached)
      (increase (car3_a) 1)
    )
  )
  (:action car1_stop-car2_stop-car3_decelerate
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (car3_running)
      (> (car3_a) car3_down_limit)
    )
    :effect (and
      (car1_goal_reached)
      (car2_goal_reached)
      (decrease (car3_a) 1)
    )
  )
  (:action car1_stop-car2_stop-car3_stop
    :precondition (and
      (= (car1_v) car1_0)
      (>= (car1_d) car1_3)
      (not (car1_engineblown))
      (= (car2_v) car2_0)
      (>= (car2_d) car2_3)
      (not (car2_engineblown))
      (= (car3_v) car3_0)
      (>= (car3_d) car3_3)
      (not (car3_engineblown))
    )
    :effect (and
      (car1_goal_reached)
      (car2_goal_reached)
      (car3_goal_reached)
    )
  )
)
